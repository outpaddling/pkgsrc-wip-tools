#!/bin/sh -e

##########################################################################
#   Script description:
#       Sync a wip package to an existing pkgsrc package
#       
#   History:
#   Date        Name        Modification
#   2020-07-23  ,,,         Begin
##########################################################################

usage()
{
    printf "Usage: $0 category/package\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


cvs_status()
{
    cvs -q status 2> /dev/null | grep '^[?F]' | grep -v 'Up-to-date' || true
    pause
    cvs -q diff -u 2> /dev/null | more
    pause
}


##########################################################################
#   Main
##########################################################################

if [ $# != 1 ] || ! echo $1 | fgrep -q '/'; then
    usage
fi
category=$(echo $1 | cut -d / -f 1)
pkg=$(echo $1 | cut -d / -f 2)

: ${EDITOR:=vi}

cd $(auto-pkgsrc-dir)/wip
if [ $(basename $(pwd)) != wip ]; then
    printf "$0: Cannot cd to wip directory.\n"
    exit 1
fi

if [ ! -d $pkg ]; then
    printf "$0: ${pkg}: No such wip package.\n"
    exit 1
fi

if [ ! -d ../$category ]; then
    printf "$0: ${category}: Not a directory.\n"
    exit 1
fi

printf "Did you run wip-check-deps or otherwise verify all dependents? y/[n] "
read resp
if [ 0$resp != 0y ]; then
    exit
fi

read -p "[U]pdate pkgsrc and wip trees [S]kip update [C]ancel " update_pkgsrc
case "$update_pkgsrc" in
U|u)
    save_cwd=$(pwd)
    cd $(auto-pkgsrc-dir)
    cvs -q up -dP || true
    cd wip
    git pull || true
    cd $save_cwd
    ;;

S|s)
    ;;

*)
    exit
esac

if [ ! -e ../$category/$pkg ]; then
    new_pkg=yes
else
    new_pkg=no
fi
rsync -av --delete --exclude CVS --exclude work $pkg ../$category
cd ../$category/$pkg

printf "Visually inspect files and make adjustments.\n"
pause
for file in Makefile DESCR buildlink3.mk; do
    if [ -e $file ]; then
	$EDITOR $file
	while fgrep -lw wip $file; do
	    printf "Editing $file, which contains wip reference.\n"
	    pause
	    $EDITOR $file
	done
    fi
done

pwd
if [ $new_pkg = yes ]; then
    printf "Add $category/$pkg? [y]/n "
    read add
    if [ 0"$add" != 0n ]; then
	cd ..
	cvs add $pkg
	cd $pkg
	find . \! -name CVS -and \! -name . -exec cvs add '{}' \;
    fi
else
    cvs_status
    printf "Checking for new and deleted files...\n"
    
    new=$(cvs -q status 2> /dev/null | grep '^[?F]' | grep -v 'Up-to-date' | awk '$1 == "?" { print $2 }')
    for file in $new; do
	read -p "Add file/directory \"$file\"? y/[n] " add
	if [ 0$add = 0y ]; then
	    find $file -exec cvs add '{}' \;
	fi
    done
    
    removed=$(cvs -q status 2> /dev/null | grep '^File.*Needs Checkout' | awk '$1 == "File:" { print $4 }')
    printf "Removed files: $removed\n"
    for file in $removed; do
	read -p "Remove file/directory \"$file\"? y/[n] " remove
	if [ 0$add = 0y ]; then
	    find -d $file -exec cvs remove '{}' \;
	fi
    done

    if [ ! -z $new ] && [ -z $removed ]; then
	cvs_status
    fi
fi

pause
pkg_dir=`pwd | awk -F / '{ printf("%s/%s", $(NF-1), $NF); }'`
pkgbase=`auto-print-make-variable $pkg_dir PKGBASE`
pkg_delete -f $pkgbase
pkg-check

printf "Run pkg-commit $category/$pkg? [y]/n "
read commit
if [ 0"$commit" != 0n ]; then
    pkg-commit $category/$pkg
fi
