#!/bin/sh -e

##########################################################################
#   Script description:
#       Sync a wip package to an existing pkgsrc package
#       
#   History:
#   Date        Name        Modification
#   2020-07-23  ,,,         Begin
##########################################################################

usage()
{
    printf "Usage: $0 category/package\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


cvs_status()
{
    cvs -q status 2> /dev/null | grep '^[?F]' | grep -v 'Up-to-date' || true
    pause
    cvs -q diff -u 2> /dev/null | more
    pause
}


##########################################################################
#   Main
##########################################################################

if [ $# != 1 ] || ! echo $1 | fgrep -q '/'; then
    usage
fi
category=$(echo $1 | cut -d / -f 1)
pkg=$(echo $1 | cut -d / -f 2)

: ${EDITOR:=vi}

cd $(auto-pkgsrc-dir)/wip
if [ $(basename $(pwd)) != wip ]; then
    printf "$0: Cannot cd to wip directory.\n"
    exit 1
fi

if [ ! -d $pkg ]; then
    printf "$0: ${pkg}: No such wip package.\n"
    exit 1
fi

if [ ! -d ../$category ]; then
    printf "$0: ${category}: Not a directory.\n"
    exit 1
fi

printf "Did you run wip-check-deps or otherwise verify all dependents? y/[n] "
read resp
if [ 0$resp != 0y ]; then
    exit
fi

if [ -e CVS ]; then
    vcs=cvs
elif [ -e .git ]; then
    vcs=git
else
    printf "Not a cvs or git repo.\n"
    exit 1
fi

read -p "[U]pdate pkgsrc and wip trees [S]kip update [C]ancel " update_pkgsrc
case "$update_pkgsrc" in
U|u)
    save_cwd=$(pwd)
    cd $(auto-pkgsrc-dir)
    if [ $vcs = cvs ]; then
	cvs -q up -dP || true
    else
	git pull -r
    fi
    cd wip
    git pull -r || true
    cd $save_cwd
    ;;

S|s)
    ;;

*)
    exit
esac

if [ ! -e "../$category/$pkg" ]; then
    new_pkg=yes
else
    new_pkg=no
fi
rsync -av --delete --exclude CVS --exclude work $pkg ../$category
cd ../$category/$pkg
rm -f COMMIT_MSG TODO

printf "Visually inspect files and make adjustments.\n"
pause
for file in Makefile DESCR buildlink3.mk; do
    if [ -e "$file" ]; then
	$EDITOR $file
	while fgrep -lw wip $file; do
	    printf "Editing $file, which contains wip reference.\n"
	    pause
	    $EDITOR $file
	done
    fi
done

if [ 0$new_pkg = 0yes ]; then
    printf "Add $category/$pkg? [y]/n "
    read add
    if [ 0$add != 0n ]; then
	cd ..
	if [ $vcs = cvs ]; then
	    cvs add $pkg
	else
	    git add $pkg
	fi
	cd $pkg
	find . \! -name CVS -and \! -name . -exec cvs add '{}' \;
    fi
else
    cvs_status
    printf "Checking for new and deleted files...\n"
    
    if [ $vcs = cvs ]; then
	# cvs status does not show files in unadded directories
	# so repeat after adding directories
	again=yes
	while [ $again = yes ]; do
	    again=no
	    new=$(cvs -q status 2> /dev/null | grep '^[?F]' | grep -v 'Up-to-date' | awk '$1 == "?" { print $2 }')
	    for file in $new; do
		read -p "Add file/directory \"$file\"? y/[n] " add
		if [ 0$add = 0y ]; then
		    cvs add $file
		    if [ -d $file ]; then
			again=yes
		    fi
		fi
	    done
	done
	
	removed=$(cvs -q status 2> /dev/null | grep '^File.*Needs Checkout' | awk '$1 == "File:" { print $4 }')
	printf "Removed files: $removed\n"
	# Restore removed files so "find" can find them and properly remove them
	cvs -q up -dP
	for file in $removed; do
	    read -p "Remove file/directory \"$file\"? y/[n] " remove
	    if [ 0$remove = 0y ]; then
		find . -name $file -print -exec rm '{}' \; -exec cvs remove '{}' \;
	    fi
	done
	cvs_status
    
	if [ ! -z "$new" ] && [ -z "$removed" ]; then
	    cvs_status
	fi
    else
	git status -s . || true
	# Note: Quotes around $() do not impact quotes in the command inside
	new_files="$(git status -s . | awk -v p=$port '$1 == "??" && $2 ~ p { print $2 }')"
	for file in $new_files; do
	    printf "Add $file? [y]/n "
	    read add_file
	    if [ 0"$add_file" != 0n ]; then
		git add $file
	    fi
	done
    fi
fi

# Why was this here? I think pkg-check takes care of this now.
# pkg_dir=`pwd | awk -F / '{ printf("%s/%s", $(NF-1), $NF); }'`
# pkgbase=`auto-print-make-variable $pkg_dir PKGBASE`
# pkg_delete -f $pkgbase
printf "Run pkg-check? [y]/n "
read check
if [ 0$check != 0n ]; then
    pkg-check
fi

printf "Run pkg-commit $category/$pkg? [y]/n "
read commit
if [ 0$commit != 0n ]; then
    pkg-commit $category/$pkg
fi
